{"version":3,"sources":["pages/Home.js","pages/AboutMe.js","pages/Projects.js","pages/Site.js","SideBar.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","AboutMe","href","Projects","target","rel","Site","SideBar","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAiBeA,EAdF,WAEX,OACE,yBAAKC,UAAU,QACb,wBAAIA,UAAU,aAAd,aACA,yBAAKA,UAAU,WACb,kBAAC,IAAD,CAAMC,GAAG,UAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,oBACA,kBAAC,IAAD,CAAMA,GAAG,SAAT,qBCiBOC,EA1BC,WACd,OACE,6BACE,wCACA,6BACE,oHACA,iLAIA,0HACA,wEACA,2GAIF,6BACE,uCACA,mHACA,qCAAU,uBAAGC,KAAK,6BAAR,uBACV,sCAAW,uBAAGA,KAAK,6BAAR,aC0BJC,EA7CE,WACf,OACE,6BACE,yBAAKJ,UAAU,kBACb,wCACA,mKAKF,yBAAKA,UAAU,WACb,4BAAI,uBAAGG,KAAK,mCAAmCE,OAAO,SAASC,IAAI,uBAA/D,YACJ,+QAKA,0NAKF,yBAAKN,UAAU,WACb,4BAAI,uBAAGG,KAAK,uCAAuCE,OAAO,SAASC,IAAI,uBAAnE,eACJ,+HAEO,uBAAGH,KAAK,iEACVE,OAAO,SAASC,IAAI,uBADlB,gCAFP,yKAOA,wLAKF,yBAAKN,UAAU,WACb,4BAAI,kBAAC,IAAD,CAAMC,GAAG,SAAT,iBACJ,iDAAsB,kBAAC,IAAD,CAAMA,GAAG,SAAT,kBAAtB,4BCXOM,EA5BF,WACX,OACE,6BACE,8CACA,4FAGA,mEACuC,uBAAGJ,KAAK,wBAAR,WADvC,iCAGA,kCACM,kDADN,4CAGA,4FAGA,6KAIA,4EAEY,uBAAGA,KAAK,0CAAR,uBAFZ,OCLSK,EAdC,WACd,OACE,yBAAKR,UAAU,UACb,wBAAIA,UAAU,UAAd,YACA,wBAAIA,UAAU,SACZ,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,oBACA,kBAAC,IAAD,CAAMA,GAAG,SAAT,qB,OCiBOQ,EAnBH,WAEV,OACE,kBAAC,IAAD,KACE,yBAAKT,UAAU,OACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjC,kBAAC,IAAD,CAAOY,KAAK,SAASC,UAAWV,IAChC,kBAAC,IAAD,CAAOS,KAAK,YAAYC,UAAWR,IACnC,kBAAC,IAAD,CAAOO,KAAK,QAAQC,UAAWL,MAGnC,kBAAC,EAAD,SCVYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.24cd9167.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nconst Home = () => {\n\n  return (\n    <div className=\"home\">\n      <h1 className=\"hometitle\">Toby Ueno</h1>\n      <div className=\"homenav\">\n        <Link to=\"/about\">About Me</Link>\n        <Link to=\"/projects\">Current Projects</Link>\n        <Link to=\"/site\">About the Site</Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;","import React from 'react';\n\nconst AboutMe = () => {\n  return (\n    <div>\n      <h1>About Me</h1>\n      <div>\n        <p>I am Toby Ueno, a 17-year-old high school student who has taken up coding as a hobby.</p>\n        <p>\n          I wrote my first line of code a year ago as part of a Computer Science course, and since then I've\n          learned and grown tremendously as a programmer.\n        </p>\n        <p>The programming languages I know are Python, JavaScript, and Java, in order of familiarity.</p>\n        <p>I also have experience with HTML and CSS.</p>\n        <p>\n          Some of my favorite libraries to work with are Selenium, React, and pandas.\n        </p>\n      </div>\n      <div>\n        <h1>Contact</h1>\n        <p>If you would like to reach out to me, feel free to do so at the following locations:</p>\n        <p>Email: <a href=\"mailto:tobyueno@gmail.com\">tobyueno@gmail.com</a></p>\n        <p>Github: <a href=\"https://github.com/uenot/\">uenot</a></p>\n      </div>\n    </div>\n  );\n};\n\nexport default AboutMe;","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nconst Projects = () => {\n  return (\n    <div>\n      <div className=\"project-header\">\n        <h1>Projects</h1>\n        <p>\n          Listed here are my completed or in-progress projects. Check out the linked GitHub repos for the code\n          and more info on each project.\n        </p>\n      </div>\n      <div className=\"project\">\n        <h2><a href=\"https://github.com/uenot/auto-ff\" target=\"_blank\" rel=\"noopener noreferrer\">Auto-FF</a></h2>\n        <p>\n          This collection of scripts was written to manage Yahoo fantasy football teams. It can draft a team based\n          on custom or pre-determined rankings and dynamic position weighting, and it can automatically send, parse,\n          and accept or reject trades.\n        </p>\n        <p>\n          The project was written in Python, and features Selenium to navigate and manipulate the website.\n          Other libraries used include BeautifulSoup for web scraping and pandas for data analysis.\n        </p>\n      </div>\n      <div className=\"project\">\n        <h2><a href=\"https://github.com/uenot/nocturne-ts\" target=\"_blank\" rel=\"noopener noreferrer\">NocturneTS</a></h2>\n        <p>\n          NocturneTS is a full text-based recreation of the turn-based combat found in the 2003 video\n          game <a href=\"https://en.wikipedia.org/wiki/Shin_Megami_Tensei_III:_Nocturne\"\n             target=\"_blank\" rel=\"noopener noreferrer\">Shin Megami Tensei: Nocturne</a>.\n          The program features multiple game modes that involve user input and a fully-automated \"experiment mode\"\n          that can simulate thousands of games with custom settings.\n        </p>\n        <p>\n          This project was written in Python. It has no major dependenciesâ€” the only one of\n          note is the FuzzyWuzzy library for handling imprecise user input.\n        </p>\n      </div>\n      <div className=\"project\">\n        <h2><Link to=\"/site\">This Website</Link></h2>\n        <p>See the dedicated \"<Link to=\"/site\">About the Site</Link>\" page for more info.</p>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Projects;","import React from 'react';\n\nconst Site = () => {\n  return (\n    <div>\n      <h1>About the Site</h1>\n      <p>\n        This site was created with the goal of practicing web design.\n      </p>\n      <p>\n        The frontend was constructed through <a href=\"https://reactjs.org/\">ReactJS</a> using functional components.\n      </p>\n      <p>\n        The <code>react-router-dom</code> package was used for reload-free pages.\n      </p>\n      <p>\n        Otherwise, all elements of the site were written in HTML/CSS.\n      </p>\n      <p>\n        Through this project, I learned about React and NodeJS and gained more experience with practical\n        implementations of HTML, CSS, and JavaScript.\n      </p>\n      <p>\n        The source code for this website is\n        available <a href=\"https://github.com/uenot/personal-site\">in this GitHub repo</a>.\n      </p>\n    </div>\n  );\n};\n\nexport default Site;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst SideBar = () => {\n  return (\n    <div className=\"header\">\n      <h2 className=\"center\">Contents</h2>\n      <ul className=\"ulnav\">\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/about\">About Me</Link>\n        <Link to=\"/projects\">Current Projects</Link>\n        <Link to=\"/site\">About the Site</Link>\n      </ul>\n    </div>\n  );\n}\n\nexport default SideBar;","import React from 'react';\nimport './App.css';\nimport Home from \"./pages/Home\";\nimport AboutMe from \"./pages/AboutMe\";\nimport Projects from \"./pages/Projects\";\nimport Site from \"./pages/Site\";\nimport SideBar from \"./SideBar.js\";\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\nconst App = () => {\n\n  return (\n    <BrowserRouter>\n      <div className=\"app\">\n        <div className=\"body\">\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/about\" component={AboutMe} />\n            <Route path=\"/projects\" component={Projects} />\n            <Route path=\"/site\" component={Site} />\n          </Switch>\n        </div>\n        <SideBar />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}